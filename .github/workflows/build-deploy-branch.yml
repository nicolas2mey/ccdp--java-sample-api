# -----------------------------------------------------------------------------
# This workflow:
#
# - Builds selected branch (manual) or latest committed branch (automatic) and push analyze metrics to Sonar.
# - Build Docker image and push it into JFROG repository.
# - Deploys application in Turbine (develop branch only).
# -----------------------------------------------------------------------------
name: build-deploy-branch

on:
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Manual launch, choose branch you want to (re)build.
  #
  # You'll be able to choose the branch you which when running action.
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  workflow_dispatch:
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Automatic launch, launched on push on:
  # - develop
  # - master
  # - features branches, i.e. named feat/**
  # - fix, i.e. named fix/**
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  push:
    branches:
      - master
      - develop
      - 'feat/**'
      - 'fix/**'
env:
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Built component name (should be the same as maven artifact id or generated jar).
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  COMPONENT_NAME: ccdp-java-sample-api

jobs:
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Launch maven build and push metrics to Sonar.
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  build:
    runs-on: [self-hosted, Linux, standard]
    env:
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Maven build options.
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      MAVEN_CLI_OPTS: "--batch-mode -Dmaven.repo.local=${{ github.workspace }}/.m2/repository"
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Sonar settings.
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      SONAR_URL: https://sonarqube.adeo.cloud
      SONAR_SCANNER_VERSION: '4.4.0.2170'
      SONAR_PROJECT_KEY: ccdp--java-sample-api
    steps:
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Information step, just reminds which branch is being built.
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - name: Display Build Branch
        run: |
          echo "Building branch ${GITHUB_REF}..."
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Checkout current branch.
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - uses: actions/checkout@v2
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Set up JAVA compilation environment.
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Caches maven dependencies (avoid downloading them for every build, remember
      # build container will be destroyed after each run).
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: "${{ github.workspace }}/.m2/repository"
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Customize Maven repositories (we use ADEO ones).
      #
      # Here, we are using repository secrets (ARTIFACTORY_USER and ARTIFACTORY_PWD)
      # to provide JFROG maven repository access.
      #
      # It may be "easier" to use Vault instead for larger projects (to have a unique secret source).
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - name: Configure maven settings
        uses: s4u/maven-settings-action@v2.4.0
        with:
          servers: '[{"id": "adeo-artifactory-releases", "username": "${{ secrets.ARTIFACTORY_USER }}", "password": "${{ secrets.ARTIFACTORY_PWD }}"},{"id": "adeo-artifactory-snapshots", "username": "${{ secrets.ARTIFACTORY_USER }}", "password": "${{ secrets.ARTIFACTORY_PWD }}"},{"id": "adeo-artifactory-mirror", "username": "${{ secrets.ARTIFACTORY_USER }}", "password": "${{ secrets.ARTIFACTORY_PWD }}"}]'
          mirrors: '[{"id": "adeo-artifactory-mirror", "name": "Adeo Artifactory Mirror Repository", "mirrorOf": "*", "url": "https://adeo.jfrog.io/adeo/maven-mirror"}]'
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Performs maven full build (with tests).
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - name: Build with Maven
        run: mvn ${{ env.MAVEN_CLI_OPTS }} verify
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Upload artifacts so that next jobs can access it.
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - name: Archive build artifacts for docker
        uses: actions/upload-artifact@v2
        with:
          name: docker-${{ github.run_id }}
          path: |
            ./target/${{ env.COMPONENT_NAME }}.jar
            ./target/lib/
            Dockerfile
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Analyze with Sonar
      #
      # Same thing here, the SONAR_TOKEN has been put into repository secrets, could
      # have been in Vault storage.
      #
      # You must create a Sonar project before being to perform an analysis of
      # your project: https://spootnik.adeo.cloud/all/new-sonar-project
      #
      # The recommended way to do is to user a token attached to a service account
      # that has an LDAP and ...a lot of #$?*% stuff no one should have to deal with.
      #
      # Good luck, really: https://jira.adeo.com/confluence/display/QXP/Sonar
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - name: Sonar Options for pull request
        if: github.event_name == 'pull_request'
        run: |
          echo "sonar_options=-Dsonar.pullrequest.branch=${{ github.head_ref }} -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} -Dsonar.pullrequest.base=${{ github.base_ref }} -Dsonar.scm.revision=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
      - name: Sonar options for push
        if: github.event_name == 'push'
        run: |
          echo "sonar_options=-Dsonar.branch.name=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      - name: Setup sonarqube
        uses: warchant/setup-sonar-scanner@v3
        with:
          version: ${{ env.SONAR_SCANNER_VERSION }}
      - name: Run sonarqube
        run: sonar-scanner
          -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
          -Dproject.settings=./target/sonar-project.properties
          ${{ env.sonar_options }}
          -Dsonar.host.url=${{ env.SONAR_URL }}
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  docker:
    env:
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # JFROG artifactory repositories.
      #
      # The dev Docker registry may differ considering where your team stores its
      # artifacts.
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      ADEO_PUBLIC_REGISTRY: adeo-docker-public.jfrog.io
      ADEO_DEV_DOCKER_REGISTRY: adeo-docker-asfr-ccdp-ops-dev.jfrog.io
      ARTIFACTORY_URL: https://adeo.jfrog.io
      ARTIFACTORY_SERVER_ID: adeo.jfrog.io
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Behavior on XRAY scan errors
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      ON_SCAN_ERROR: 'GITHUB_ISSUE'
    needs: build
    runs-on: [self-hosted, Linux, standard]
    steps:
      - uses: actions/checkout@v2
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Download artifacts from previous build step.
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: docker-${{ github.run_id }}
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Compute and clean up tag name, transform 'feat/my-feat' into 'feat/my-feat'
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - name: Extract branch name for branch
        if: startsWith(github.ref, 'refs/heads/')
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
      - name: Set escaped tag name
        run: |
          echo "TAG_NAME=$(echo ${{ env.BRANCH_NAME }} | sed 's/\//-/g')" >> $GITHUB_ENV
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Login to ADEO Docker registries.
      #
      # As we are using Docker Collections images for JRE, we must be able to log to:
      # - ADEO Public registry
      # - ADEO Developer registry
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - name: Login to ADEO pulic registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.ADEO_PUBLIC_REGISTRY }}
          username: ${{ secrets.ARTIFACTORY_USER }}
          password: ${{ secrets.ARTIFACTORY_PWD }}
      - name: Login to ADEO development registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.ADEO_DEV_DOCKER_REGISTRY }}
          username: ${{ secrets.ARTIFACTORY_USER }}
          password: ${{ secrets.ARTIFACTORY_PWD }}
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Compute and clean up tag name, transform 'feat/my-feat' into 'feat/my-feat'
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - name: Extract branch name for branch
        if: startsWith(github.ref, 'refs/heads/')
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
      - name: Set escaped tag name
        run: |
          echo "TAG_NAME=$(echo ${{ env.BRANCH_NAME }} | sed 's/\//-/g')" >> $GITHUB_ENV
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Dockers build.
      # This actions will not push image because we want to perform a XRAY scan
      # check before.
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - name: Build and push docker image ${{ env.COMPONENT_NAME }}:${{env.TAG_NAME}} to DEV registry
        uses: docker/build-push-action@v2
        with:
          file: ./Dockerfile
          context: .
          load: true
          tags: ${{ env.ADEO_DEV_DOCKER_REGISTRY }}/${{ env.COMPONENT_NAME }}:${{env.TAG_NAME}}
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Docker scan with JFROG XRAY.
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v2
      - name: Configure JFrog CLI
        run: jfrog config add ${{ env.ARTIFACTORY_SERVER_ID }} --url ${{ env.ARTIFACTORY_URL }} --user ${{ secrets.ARTIFACTORY_USER  }} --password ${{ secrets.ARTIFACTORY_PWD }} --interactive=false
      - name: XRAY Scan
        id: xray_scan
        run: jfrog docker scan ${{ env.ADEO_DEV_DOCKER_REGISTRY }}/${{ env.COMPONENT_NAME }}:${{env.TAG_NAME}} --watches=all-high --server-id ${{ env.ARTIFACTORY_SERVER_ID }} > scan.txt
        continue-on-error: ${{ env.ON_SCAN_ERROR !=  'JOB_FAIL' }}
      - name: Check if need to create an issue because of vulnerability
        id: create_issue_check
        if: ${{ steps.xray_scan.outcome == 'failure' && env.ON_SCAN_ERROR == 'GITHUB_ISSUE' }}
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs')
            const fileContents = fs.readFileSync('./scan.txt').toString()
            
            github.rest.issues.createIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'CVE Issue'
              body: fileContents
            })

#        with:
#          token: ${{ secrets.DEPLOY_API_TOKEN }}
#          title: CVE ISSUE
#          body: |
#            ### Context
#            [Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
#            [Codebase](https://github.com/${{ github.repository }}/tree/${{ github.sha }})
#            Workflow name - `${{ github.workflow }}`
#            Job -           `${{ github.job }}`
#            status -        `${{ job.status }}`
#            ### Content
#          run:
#            cat ./scan.txt

      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Dockers push to JFROG artifactory (build should result from local cache so
      # no second build penalty expected).
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - name: Build and push docker image ${{ env.COMPONENT_NAME }}:${{env.TAG_NAME}} to DEV registry
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.ADEO_DEV_DOCKER_REGISTRY }}/${{ env.COMPONENT_NAME }}:${{env.TAG_NAME}}

  deploy:
    needs: docker
    runs-on: [self-hosted, Linux, standard]
    if: ${{ 'refs/heads/develop' == github.ref }}
    steps:
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Pop an event for a Turbine deployment, see turbine.yml workflow file for
    # more details.
    #
    # The DEPLOY_API_TOKEN secret is a token that will be used to use GITHUB API.
    # See: https://github.com/marketplace/actions/dispatch-action
    #
    # Here, a personal access token has been created and stored into repository
    # secrets.
    #
    # NB: remember to enable SSO and authorize ADEO on this token.
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    - name: Turbine deploy ${{ env.COMPONENT_NAME }} to develop environment
      uses: mvasigh/dispatch-action@main
      with:
        token: ${{ secrets.DEPLOY_API_TOKEN }}
        event_type: turbine_deploy
        message: |
          {
            "env": "dev",
            "version": "develop",
            "component_name": "${{ env.COMPONENT_NAME }}"
          }
