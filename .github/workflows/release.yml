# -----------------------------------------------------------------------------
# This workflow:
#
# - Performs a maven release.
# - Creates a new Docker image with a release tag and publish it to JFROG.
# -----------------------------------------------------------------------------
name: release

on:
  workflow_dispatch:
    inputs:
      type:
        description: 'Type of release (patch, minor, major)'
        required: false
        default: 'patch'

env:
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Built component name (should be the same as maven artifact id or generated jar).
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  COMPONENT_NAME: ccdp-java-sample-api

jobs:
  release:
    name: Release
    runs-on: [self-hosted, Linux, standard]
    env:
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Maven build options.
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      MAVEN_CLI_OPTS: "--batch-mode -Dmaven.repo.local=${{ github.workspace }}/.m2/repository -Dadeo.artifactory.user=${{ secrets.ARTIFACTORY_USER }} -Dadeo.artifactory.pwd=${{ secrets.ARTIFACTORY_PWD }}"
    steps:
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Checkout current branch.
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    - uses: actions/checkout@v3
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Set up JAVA compilation environment.
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Caches maven dependencies (avoid downloading them for every build, remember
    # build container will be destroyed after each run).
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/.m2/repository"
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Customize Maven repositories (we use ADEO ones).
    #
    # Here, we are using repository secrets (ARTIFACTORY_USER and ARTIFACTORY_PWD)
    # to provide JFROG maven repository access.
    #
    # It may be "easier" to use Vault instead for larger projects (to have a unique secret source).
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    - name: Configure maven settings
      uses: s4u/maven-settings-action@v2.8.0
      with:
        servers: '[{"id": "adeo-artifactory-releases", "username": "${{ secrets.ARTIFACTORY_USER }}", "password": "${{ secrets.ARTIFACTORY_PWD }}"},{"id": "adeo-artifactory-snapshots", "username": "${{ secrets.ARTIFACTORY_USER }}", "password": "${{ secrets.ARTIFACTORY_PWD }}"},{"id": "adeo-artifactory-mirror", "username": "${{ secrets.ARTIFACTORY_USER }}", "password": "${{ secrets.ARTIFACTORY_PWD }}"}]'
        mirrors: '[{"id": "adeo-artifactory-mirror", "name": "Adeo Artifactory Mirror Repository", "mirrorOf": "*", "url": "https://adeo.jfrog.io/adeo/maven-mirror"}]'
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Get the pom version and remove the anything after the '-' character.
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    - name: Get maven version
      id: pom_version
      run: |
        export version=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
        export version=$(echo "${version%%-*}")
        echo "::set-output name=version::$(echo $version)"
    - name: Print current version
      run: echo "Current version = ${{ steps.pom_version.outputs.version }}"
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Following steps will compute next release and snapshot versions.
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    - name: 'Compute next release version'
      id: next_versions
      uses: "WyriHaximus/github-action-next-semvers@v1"
      with:
        version: ${{ steps.pom_version.outputs.version }}
    - name: Choose next version
      id: choose
      run: |
        if [[ "${{ github.event.inputs.type }}" == "major" ]]; then export next_version=${{ steps.next_versions.outputs.major }};
        elif [[ "${{ github.event.inputs.type }}" == "minor" ]]; then export next_version=${{ steps.next_versions.outputs.minor }};
        elif [[ "${{ github.event.inputs.type }}" == "patch" ]]; then export next_version=${{ steps.pom_version.outputs.version }};
        fi
        echo "::set-output name=next::$(echo $next_version)"
        export pure_next_version=$(echo "${next_version%%-*}")
        echo "::set-output name=pure_next_version::$(echo $pure_next_version)"
    - name: 'Get next snapshot version'
      id: snapshot_version
      uses: "WyriHaximus/github-action-next-semvers@v1"
      with:
        version: ${{ steps.choose.outputs.pure_next_version }}
    - name: Set release and snapshot versions
      id: new_versions
      run: |
        echo "::set-output name=snapshot::$(echo ${{ steps.snapshot_version.outputs.patch }}-SNAPSHOT)"
        echo "::set-output name=release::$(echo ${{ steps.choose.outputs.next }})"
    - name: Log versions
      run: echo "Releasing version ${{ steps.new_versions.outputs.release }}, new dev version will be ${{ steps.new_versions.outputs.snapshot }}"
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Prepare the Maven release.
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    - name: Configure git user
      run: |
        git config user.email "actions@github.com"
        git config user.name "GitHub Actions"
    - name: Release
      run: |
        mvn -B -ntp release:prepare release:clean -DpreparationGoals="clean deploy -B -Dmaven.test.skip=true" -DpushChanges=false -DreleaseVersion=${{ steps.new_versions.outputs.release }} -DdevelopmentVersion=${{ steps.new_versions.outputs.snapshot }}
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.DEPLOY_API_TOKEN }}
        branch: ${{ github.ref }}
        tags: true
        force: true
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Writes release version into a file so that it can be read from another job.
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    - name: Write version to file
      run: echo ${{ steps.new_versions.outputs.release }} > version
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Upload artifacts so that next jobs can access it.
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    - name: Archive build artifacts for docker
      uses: actions/upload-artifact@v3
      with:
        name: docker-${{ github.run_id }}
        path: |
          ./target/${{ env.COMPONENT_NAME }}.jar
          ./target/lib/
          Dockerfile
          version

  docker:
    env:
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # JFROG artifactory repositories.
      #
      # The dev Docker registry may differ considering where your team stores its
      # artifacts.
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      ADEO_PUBLIC_REGISTRY: adeo-docker-public.jfrog.io
      ADEO_RELEASE_DOCKER_REGISTRY: adeo-docker-asfr-ccdp-ops-release.jfrog.io
    name: Docker build and push
    needs: release
    runs-on: [self-hosted, Linux, standard]
    steps:
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Download artifacts from previous build step.
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: docker-${{ github.run_id }}
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Login to ADEO Docker registries.
      #
      # As we are using Docker Collections images for JRE, we must be able to log to:
      # - ADEO Public registry
      # - ADEO Developer registry
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - name: Login to ADEO pulic registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ADEO_PUBLIC_REGISTRY }}
          username: ${{ secrets.ARTIFACTORY_USER }}
          password: ${{ secrets.ARTIFACTORY_PWD }}
      - name: Login to ADEO development registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ADEO_RELEASE_DOCKER_REGISTRY }}
          username: ${{ secrets.ARTIFACTORY_USER }}
          password: ${{ secrets.ARTIFACTORY_PWD }}
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Build Docker image and push to JFROG
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - name: Set tag name
        run: echo "TAG_NAME=$(cat version)" >> $GITHUB_ENV
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Dockers build and push to JFROG artifactory.
      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      - name: Build and push docker image ${{ env.COMPONENT_NAME }}:${{env.TAG_NAME}} to RELEASE registry
        uses: docker/build-push-action@v3
        with:
          file: ./Dockerfile
          context: .
          push: true
          tags: ${{ env.ADEO_RELEASE_DOCKER_REGISTRY }}/${{ env.COMPONENT_NAME }}:${{env.TAG_NAME}}
